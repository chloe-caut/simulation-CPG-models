
#et maintenant avec 2 neurones
# python3 w_n_neuron_TAD_hebb_chloe_utilisedansv5

import numpy as np
import matplotlib.pyplot as plt
import math
import scipy.signal


#toM = 0.35
#toS = 3.5
#Af = 1
#sigmaS = 2
#"sigmaF = 1.5"
#w_inj = 0.5 #poids synaptique I_inj
V0 = 0.01
q0 = 0.01
dt = 0.01
eps = 0.9 # 0.5

class NeuroneRS : pass  #car pas vraie prog obj



########################################################
###             état du neurone instant t            ###
########################################################  


def create_NRS(nom, I_inj ,w_inj, V, sigmaS ,sigmaF,Af ,q):  #valeurs placeholder
    neurone = NeuroneRS()
    neurone.nom =  nom 
    neurone.I_inj = I_inj  # courant d'entrée:  peut etre une somme de courants
    neurone.w_inj =  w_inj  # poids synaptique courant d'entrée 
    neurone.V=  V    # output neurone- on rappelle V = Vs et la dérivée peut se noter y au lieu de Vs point-
    neurone.sigmaS =  sigmaS 
    neurone.sigmaF =  sigmaF 
    neurone.Af =Af
    neurone.q = q  #signal slow current
    #les deux tau décident de la freq propre.
    neurone.toM = 0.35
    neurone.toS = 3.5    
    return neurone



########################################################
###          fonctions basiques nécessaire           ###
######################################################## 


#signal de forçage, appelé I_inj mais une ou deux fois F dans les articles: ne pas confondre.
def Input(t) :
    amplitude  = 1
    freq = 2
    phase=0
    #dirac
    '''
    I=0
    if t >=3 and t<=17:
        I = scipy.signal.square(t, duty= 0.5) '''
        
    #carré
    #I= scipy.signal.square(t, duty= 0.5) 

    #forme spéciale test dirqc puis sin puis silence pour voir si hebb 
    '''
    if t<=15:
        I=0
    if t>15 and t<40:
        I = amplitude * math.sin(6.28 * freq * t + phase )
    else:
        I=0
    '''

    #sin
    #-------------------------------------------------------------------------------ici i inj sinus a freq variable
    I = amplitude * math.sin(6.28 * freq * t + phase )

    return I

#fonction crée pour raccourcir la notation, aussi appelée F dans les articles
def F(n):
    return n.V - n.Af * np.tanh( (n.sigmaF/n.Af)*n.V )


#ces deux la sont techniquement des dV/dt et dq/dt. on ne les calcule que pour les intégrer ensuite   
def f_V(n, t):
    return  -( F(n) + n.q - n.w_inj *n.I_inj )  /n.toM

def f_Q(n,t):
    return (-n.q + n.sigmaS*n.V) /n.toS



#hebb 
#traité aussi comme un dsigmas/dt
def f_sigmaS(n,t):
    y= f_V(n,t) #y=dV/dt
    sousRacine =  y**2 + (n.V)**2 #les carrés
    racine = math.sqrt( sousRacine ) #la racine
    quotient = y/ racine #if racine else 0    #la division #################################################################################ici le if else 0
    sigmaspoint = 2 * eps * n.I_inj * math.sqrt(n.toM*n.toS) * math.sqrt(1+ n.sigmaS - n.sigmaF) *      quotient
    
    # 2 * eps * n.I_inj * math.sqrt(n.toM*n.toS) * math.sqrt(1+ n.sigmaS - n.sigmaF) *    f_V(n,t) /  math.sqrt( f_V(n,t)**2 + (n.V)**2  )
    return sigmaspoint


########################################################
###                   intégration                    ###
########################################################  


#faut il mettre à jour le sigmaS avant ou après calcul de Vs? 
#comparer les 2, un des cas peut diverger, 
#sigmaS calculé en fct de l'état courant donc à calculer d'abord car sigmaS de sortie est en t+1

#Methode d'euler pour résoudre les équations différentielles
#intégration / main / boucle de résolution - trouver nom



def simul(n):
    t = 0

    T = 30                                             # définition du temps de simulation --------------------------------tests ici
    list_V = []
    list_T = []
    list_I_inj = []
    list_sigmaS=[]
    #----------------------------------------------------------------intégration par méhode d'euler, incrémentation sur les neurones
    while t < T:
        n.I_inj = Input(t)
        n.sigmaS = n.sigmaS  + dt* f_sigmaS(n,t)  # --------------------------------------------------------------test ici pour enlever hebb
        n.V      = n.V      + dt* f_V(n,t)
        n.q      = n.q      + dt* f_Q(n,t)
        #test
        '''
        print ("sortie  :   ",  n.V)
        print (" q  :   ",  n.q)
        print ("sigma :   ",  n.sigmaS)
        print ("i_inj :  ", Input(t))
        '''

        t += dt

        list_V.append(n.V)
        list_T.append(t)  
        list_I_inj.append(n.I_inj)  
        list_sigmaS.append(n.sigmaS)
        

    return list_V, list_T, list_I_inj, list_sigmaS



########################################################
###                set param and run                 ###
######################################################## 
#setting paramètres
neur1 = create_NRS(nom='RS1', I_inj = 0.01,w_inj= 0.5 , V=0.001, sigmaS=30,sigmaF=2, Af=0.2, q=0) #------------------------------------tests ici w inj anien af1 apres 0.1 pas mal
#neur2 = create_NRS(nom='RS2', I_inj = 0.0,w_inj=0.5, V=0.0, sigmaS=2.0 ,sigmaF=1.5)

#run ici
Vs1,Ts1, I_inj1, liste_sigma_s = simul(neur1)





########################################################
###                    dessin  3 figs                ###
########################################################  


def plot(Vs1, Ts1, I_inj1, sigmaS):
    fig, axs = plt.subplots(2, 1, figsize=(10, 18))

    ##### titre haut
    plt.suptitle(
        "Etude théorique CPGs - 1 neurone  -  w_inj= " + str(neur1.w_inj) + "  - eps = " + str(eps),
        fontsize=14,
        #fontweight="bold",
        x=0.09,
        y=1,
        ha="left",
    )
    '''
    #section qui ne marche plus avec les subplots
    ##### sous titre haut
    plt.title(
        '1 neurone, w_inj= ' + str(neur1.w_inj) + ', eps = ' + str(eps) ,
        fontsize=14,
        pad=10,
        x=0.08,
        y=1,
        loc="left",
    )'''

    # First subplot
    axs[0].plot(Ts1, I_inj1, '-y', label='I_inj - signal de forçage')
    axs[0].plot(Ts1, Vs1, '-m', label='Vs - signal sortie')
    axs[0].set_xlabel('temps')
    axs[0].set_ylabel('potentiel')
    axs[0].legend(loc='upper right')
    #axs[1].set_title('I_inj - signal de forçage')
    
    '''
    # Second subplot enlevé pour superposer entrée et sortie
    axs[1].plot(Ts1, Vs1, '-m')           #label='Vs - signal sortie')
    axs[1].set_xlabel('temps')
    axs[1].set_ylabel('Vs - signal sortie')
    #axs[0].legend(loc='upper right')
    #axs[0].set_title('Vs - signal sortie')
    '''

    # Third subplot
    axs[1].plot(Ts1, liste_sigma_s, 'b-')      #label='sigma S')
    axs[1].set_xlabel('temps')
    axs[1].set_ylabel('sigma S')
    #axs[2].legend(loc='upper right')
    #axs[2].set_title('sigma S')
    
    # Adjust layout to prevent overlap
    plt.tight_layout()

    # Display the plot
    plt.show()

plot(Vs1, Ts1, I_inj1, liste_sigma_s)



########################################################
###                 dessin 1 fig                     ###
######################################################## 

'''
plt.plot(Ts1, Vs1,    '-m',        label ='Vs - signal sortie')
plt.plot(Ts1, I_inj1,'y--',    label ='I_inj - signal de forçage')
plt.plot(Ts1, liste_sigma_s, 'b-', label= 'sigma S')
#Vs2,Ts2 = Neurone_RS(neur2)
#plt.plot(Ts2, Vs2)

#### labels axes
plt.xlabel('temps')
plt.ylabel('intensité')


##### titre haut
plt.suptitle(
    "Etude théorique CPGs",
    fontsize=16,
    fontweight="bold",
    x=0.126,
    y=0.98,
    ha="left",
)

##### sous titre haut
# autre syntaxe possible: plt.title('x= '+str(x)+', y = '+str(y))
plt.title(
    '1 neurone, w_inj= ' + str(neur1.w_inj) + ', eps = ' + str(eps) ,
    fontsize=14,
    pad=10,
    loc="left",
)

#### le carré avec les labels
plt.legend(loc='upper right')  


plt.show()
'''