#testons cela

#modif 2, obj= implémeter l'apprentissage hebbian pour un neurone
#se emt en évdence en ayant I_inj qui change de forme, ou devient nulle 
#après un certain temps, dans un mode où la réponse à une impulsion ne 
#serait PAS de rester en oscillation ad vitam eternam!!!

import numpy as np
import matplotlib.pyplot as plt
import math          #utilisé notamment pour les EDs mais aussi pout I_inj sinus
import scipy.signal  #signal carré



########################################################
###                   paramétrage                    ###
########################################################  


# Le modèle de R&S est composé de 2 EDO1. Le couplage se fait à travers une fonction F
#les 2 tau sont séparés d'un facteur 10 pour représenter l'effet chimique et l'effet électrique
toM = 0.35                   #0.35
toS = 3.5                    #3.5

#paramètres de la fonction F
Af = 1                       #1
# 1.5 le premier à régler
sigmaF = 3
# 2
sigmaS = 2

w_inj = 0.5                  # 0.5 poids synaptique I_inj
V0 = 0                       #0
q0 = 0                       #0
delta = 0.01                 #0.01



########################################################
###                        EDS                       ###
########################################################  


def F(V, sigmaF):
    return V - Af*np.tanh( V*(sigmaF/Af) )



#equa diff sur V
#vars locales: I_inj est la valeur en t de la fct de forçage
def f_V(V, sigmaF, q, I_inj, t):
    # ---------------------------------------------------------------------------  < --- définition du signal I_inj
    I_inj = scipy.signal.square(t, duty= 0.5)           
    # ---------------------------------------------------------------------------  < --- définition de ED sur V     
    #sortie1= (   - F(V,sigmaF) -q + w_inj *I_inj     ) / toM       pour sans apprentissage
    # sigmaF = f(I_inj) à présent
    sortie1= (   - F(V,sigmaF) -q + w_inj *I_inj     ) / toM                          
    return    sortie1 , I_inj #remplir une liste ici pour le tracé

#equa diff sur q
def f_Q(q, V):
    # ---------------------------------------------------------------------------  < --- définition de ED sur q    
    # ---------------------------------------------------------------------------  < --- APP HEBBIEN ICI UNIQUEMENT????? 

    return (-q + incrSigmaS(sigmaS, V,q) * V) / toS


#pour plasticité hebbienne
# freq learning ---- ici on calcule la dérivée
def sigmaSpt(SIGMA,V,q):
        # ---------------------------------------------------------------------------  < --- def formule sigmaS ici   
    sSp = 2 * w_inj * f_V(V,sigmaF,q,I_inj,t)[1] * sqrt(toM * toS) * sqrt(1 + SIGMA + sigmaF ) * V / sqrt(Vpt *Vpt + V*V)  #truc a rallong = Iinj
    
    return sSp


########################################################
###                    résolution                    ###
########################################################  


#fonction uniquement incrémentale - à refaire 
def incrSigmaS(S,V,q):
    return S + sigmaSpt(S, V,q) * delta # sigma + derivée de sigma * delta t

#apprentissage fenêtre 
'''
def solveSigmaSwindow():
    t=0
    T= 40 
    list_S = []
    list_T = []
    S=0 #maybe
    while t<T: 
        S = S + sigmaSpt() * delta    
        t += delta
        list_S.append(S)
        #list_T.append(t)
    return list_S   #ne pas retourner une liste si on a besoin d'une valeur dans fQ
'''

#methode d'euler pour rés les EDs
#la fct neurone appelle  chaque instant les valeurs de f_V donc is ok si I_inj en haut est une valeur simple
#en sortie de neurone, 3 listes remplies au fur et à mesure
def Neurone_RS(V, sigmaF, q, I_inj):
    t=0
    T= 40 #def du temps de simul (50 initialement)
    list_V = []
    list_T = []
    list_I_inj = []
    while t<T: 
        V = V + f_V(V,sigmaF,q,I_inj,t)[0] * delta      #f_v retourne à présent la fct ET I_inj! 
        q = q + f_Q(q,V) * delta
        sigmaS= incrSigmaS(sigmaS,V,q)
        t += delta
        #print("Temps. ", t, V, I_inj)
        list_V.append(V)
        list_T.append(t)
        list_I_inj.append(f_V(V,sigmaF,q,I_inj,t)[1])         # I_inj deuxieme sortie de f_v
    return list_V, list_T, list_I_inj


#appel final: 3 listes en résultat: Signal de sortie du neurone Vs, liste de temps Ts à mettre en abscisse, et I_inj le signal d'entrée/forçage
Vs, Ts, I_inj = Neurone_RS(0, sigmaF, 0, 0)   




########################################################
###                      dessin                      ###
########################################################  



#### courbes avec Ts le temps
plt.plot(Ts, Vs, '-m',    label ='Vs - signal sortie')  # -b donne ligne bleur, b-- donne poitillé bleu
plt.plot(Ts, I_inj, 'g--', label ='I_inj - signal entrée/forçage') 

#### labels axes
plt.xlabel('temps')
plt.ylabel('intensité')


##### titre haut
plt.suptitle(
    "Etude théorique CPGs",
    fontsize=16,
    fontweight="bold",
    x=0.126,
    y=0.98,
    ha="left",
)

##### sous titre haut
plt.title(
    "avec un neurone",
    fontsize=14,
    pad=10,
    loc="left",
)

#plt.ylim(-1,25) permet d'applatir la courbe selon y (inutile ici)


#### le carré avec les labels
plt.legend(loc='upper right')  


#### important
plt.show()